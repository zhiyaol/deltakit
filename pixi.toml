[workspace]
authors = ["Deltakit Team <deltakit@riverlane.com>"]
channels = ["conda-forge"]
name = "deltakit"
platforms = ["win-64", "linux-64", "osx-64", "osx-arm64"]
version = "0.0.0"

[tasks]

[tasks.tests]
description = "Run the tests"
cmd = """cd {{ project }} && pytest --cov {{ project | replace("-", "_")}} --cov-report term-missing {{ args }}"""
args = [{"arg" = "project", "default" = "."},
        {"arg" = "args", "default" = ""}]

[tasks.testmon]
description = "Run the tests"
cmd = """pytest --testmon --slow"""

[tasks.lint]
description = "Run lint"
cmd = """ruff check {{ project }}"""
args = [{"arg" = "project", "default" = "."}]

[tasks.mypy]
description = "Run mypy"
cmd = "mypy {{ project }}"
args = [{"arg" = "project", "default" = "deltakit-explorer"}]

[tasks.mypy-all]
description = "Run mypy on all subpackages"
cmd = ["bash", "-c", "(find . -maxdepth 1 -type d -name \"deltakit*\"; echo \"./src\") | xargs -I {} bash -c 'echo \"Running mypy on: {}\" && mypy \"{}\"'"]

[tasks.docs]
description = "Build documentation"
cmd = "sphinx-autobuild -b html docs docs/_build/html --open-browser"

[tasks.build_docs]
description = "Build documentation, treating warnings as errors"
cmd = "sphinx-build -W -b html docs docs/_build/html"

[tasks.serve_docs]
description = "Serve documentation"
cmd = "python -m http.server --directory docs/_build/html"

[tasks.licenses]
description = "Run pip-licenses"
cmd = "pixi run -e {{ project }}-licenses pip-licenses"
args = [{"arg" = "project", "default" = "deltakit-explorer"}]

[tasks.ochrona]
description = "Run ochrona"
# the presence of `parso`/`tornado`/'jupyterlab' cause `ochrona` to crash
# https://github.com/ochronasec/ochrona-cli/issues/75
cmd = """pip freeze | grep -v -e "parso" -e "tornado" -e "jupyterlab" | ochrona"""

[tasks.pip_audit]
description = "Run pip-audit"
cmd = """pip freeze | pip-audit"""

[tasks.bandit]
description = "Run bandit"
cmd = """bandit -c pyproject.toml -r . -l"""

[tasks.check_pyproject]
description = "Validate pyproject.toml"
cmd = "validate-pyproject {{ project }}/pyproject.toml"
args = [{"arg" = "project", "default" = "."}]

[tasks.check_workflows]
description = "Validate GitHub Actions workflows"
cmd = "actionlint --verbose"

[tasks.spellcheck]
description = "Run typos"
cmd = "typos"

[tasks.build]
description = "Build wheel/sdist"
cmd = "python -m build {{ project }}"
args = [{"arg" = "project", "default" = "."}]

[tasks.build-all]
description = "Build wheels/sdists for deltakit and all subpackages"
cmd = ["bash", "-c", "rm -f dist/*.whl && rm -f dist/*.tar.gz && rm -f dist/*.zip && (find . -maxdepth 1 -type d -name \"deltakit*\") | xargs -I {} bash -c 'echo \"***** Building wheel/sdist for: {} *****\" && python -m build --outdir dist \"{}\"'"]

[tasks.zip-dist]
description = "Zip files in dist folder"
cmd = ["bash", "-c", "cd dist && rm -f \"deltakit_wheels.zip\" && zip \"deltakit_wheels.zip\" *.whl && rm -f \"deltakit_sdists.zip\" && zip \"deltakit_sdists.zip\" *.tar.gz"]

[tasks.wheels-zip-docs]
depends-on = [{ task = "zip-dist" }]
description = "Create zip file for docs with all Deltakit wheels"
cmd = ["bash", "-c", "mkdir -p docs/_static/_wheels && cp dist/deltakit_wheels.zip docs/_static/_wheels/"]

[tasks.build-all-wheels-zip-docs]
description = "Build all wheels and create zip file for docs build"
depends-on = [{ task = "build-all" }, { task = "zip-dist" }, { task = "wheels-zip-docs" }]

[tasks.vale]
description = "Run vale"
cmd = "python tools/vale.py"

[tasks.release]
description = "Run release tasks"
cmd = "semantic-release -vv version --no-push --no-commit --no-tag && python tools/propagate_version.py && pixi run -e monorepo pip-licenses --format=confluence  --output-file licenses.confluence"

[tasks.deptry]
description = "Run deptry"
cmd = "cd {{ project }} && deptry ."
args = [{"arg" = "project", "default" = "."}]

[tasks.isort]
description = "Run isort"
cmd = "isort ."

[dependencies]
pandoc = ">=3.7.0.2,<4"
python = ">=3.10"
actionlint = ">=1.7"
pixi-pycharm = ">=0.0.8,<0.0.9"

[pypi-dependencies]
deltakit-core = { path = "./deltakit-core/", editable = true }
deltakit-circuit = { path = "./deltakit-circuit/", editable = true }
deltakit-decode = { path = "./deltakit-decode/", editable = true }
deltakit-explorer = { path = "./deltakit-explorer/", editable = true }
deltakit = { path = "./", editable = true, extras=["dev"] }

[feature.python.dependencies]
python = ">=3.10"

[feature.py310.dependencies]
python = "3.10.*"

[feature.py311.dependencies]
python = "3.11.*"

[feature.py312.dependencies]
python = "3.12.*"

[feature.py313.dependencies]
python = "3.13.*"

[feature.licenses.pypi-dependencies]
pip-licenses = ">= 5.0.0"

[feature.decode.pypi-dependencies]
deltakit-core = { path = "./deltakit-core/", editable = true }
deltakit-circuit = { path = "./deltakit-circuit/", editable = true }
deltakit-decode = { path = "./deltakit-decode/", editable = true }

[feature.core.pypi-dependencies]
deltakit-core = { path = "./deltakit-core/", editable = true }

[feature.circuit.pypi-dependencies]
deltakit-circuit = { path = "./deltakit-circuit/", editable = true }

[feature.explorer.pypi-dependencies]
deltakit-explorer = { path = "./deltakit-explorer/", editable = true }
deltakit-circuit = { path = "./deltakit-circuit/", editable = true }
deltakit-core = { path = "./deltakit-core/", editable = true }

[feature.monorepo.pypi-dependencies]
deltakit-core = { path = "./deltakit-core/", editable = true }
deltakit-circuit = { path = "./deltakit-circuit/", editable = true }
deltakit-decode = { path = "./deltakit-decode/", editable = true }
deltakit-explorer = { path = "./deltakit-explorer/", editable = true }
deltakit = { path = ".", editable = true }

[feature.pytest.dependencies]
pytest = ">=8.4.1,<9"
pytest-cov = ">=6.2.1,<7"
pytest-mock = ">=3.14.1,<4"
pytest-asyncio = ">=1,<2"
pytest-skip-slow = ">=0.0.5,<1"
pytest-lazy-fixtures = ">=1,<2"

[feature.deltakit-decode-tests.tasks.tests]
description = "Run the tests on deltakit-decode in minimal environment"
cmd = """cd deltakit-decode && pytest --cov deltakit_decode --cov-report term-missing {{ args }}"""
args = [{"arg" = "args", "default" = ""}]

[feature.deltakit-core-tests.tasks.tests]
description = "Run the tests on deltakit-core in minimal environment"
cmd = """cd deltakit-core && pytest --cov deltakit_core --cov-report term-missing {{ args }}"""
args = [{"arg" = "args", "default" = ""}]

[feature.deltakit-circuit-tests.tasks.tests]
description = "Run the tests on deltakit-circuit in minimal environment"
cmd = """cd deltakit-circuit && pytest --cov deltakit_circuit --cov-report term-missing {{ args }}"""
args = [{"arg" = "args", "default" = ""}]

[feature.deltakit-explorer-tests.tasks.tests]
description = "Run the tests on deltakit-explorer in minimal environment"
cmd = """cd deltakit-explorer && pytest --cov deltakit_explorer --cov-report term-missing {{ args }}"""
args = [{"arg" = "args", "default" = ""}]

[environments]
# Establish environments for each sub-package with minimal dependencies for a given task
monorepo = {features = ["python", "monorepo", "licenses"], no-default-feature = true, solve-group='licenses'}
deltakit-decode-licenses = {features = ["python", "decode", "licenses"], no-default-feature = true, solve-group='licenses'}
deltakit-core-licenses = {features = ["python", "core", "licenses"], no-default-feature = true, solve-group='licenses'}
deltakit-circuit-licenses = {features = ["python", "circuit", "licenses"], no-default-feature = true, solve-group='licenses'}
deltakit-explorer-licenses = {features = ["python", "explorer", "licenses"], no-default-feature = true, solve-group='licenses'}
deltakit-decode-tests-py310 = {features = ["py310", "pytest", "deltakit-decode-tests", "decode"], no-default-feature = true, solve-group='py310'}
deltakit-core-tests-py310 = {features = ["py310", "pytest", "deltakit-core-tests", "core"], no-default-feature = true, solve-group='py310'}
deltakit-circuit-tests-py310 = {features = ["py310", "pytest", "deltakit-circuit-tests", "circuit"], no-default-feature = true, solve-group='py310'}
deltakit-explorer-tests-py310 = {features = ["py310", "pytest", "deltakit-explorer-tests", "explorer"], no-default-feature = true, solve-group='py310'}
deltakit-decode-tests-py311 = {features = ["py311", "pytest", "deltakit-decode-tests", "decode"], no-default-feature = true, solve-group='py311'}
deltakit-core-tests-py311 = {features = ["py311", "pytest", "deltakit-core-tests", "core"], no-default-feature = true, solve-group='py311'}
deltakit-circuit-tests-py311 = {features = ["py311", "pytest", "deltakit-circuit-tests", "circuit"], no-default-feature = true, solve-group='py311'}
deltakit-explorer-tests-py311 = {features = ["py311", "pytest", "deltakit-explorer-tests", "explorer"], no-default-feature = true, solve-group='py311'}
deltakit-decode-tests-py312 = {features = ["py312", "pytest", "deltakit-decode-tests", "decode"], no-default-feature = true, solve-group='py312'}
deltakit-core-tests-py312 = {features = ["py312", "pytest", "deltakit-core-tests", "core"], no-default-feature = true, solve-group='py312'}
deltakit-circuit-tests-py312 = {features = ["py312", "pytest", "deltakit-circuit-tests", "circuit"], no-default-feature = true, solve-group='py312'}
deltakit-explorer-tests-py312 = {features = ["py312", "pytest", "deltakit-explorer-tests", "explorer"], no-default-feature = true, solve-group='py312'}
deltakit-decode-tests-py313 = {features = ["py313", "pytest", "deltakit-decode-tests", "decode"], no-default-feature = true, solve-group='py313'}
deltakit-core-tests-py313 = {features = ["py313", "pytest", "deltakit-core-tests", "core"], no-default-feature = true, solve-group='py313'}
deltakit-circuit-tests-py313 = {features = ["py313", "pytest", "deltakit-circuit-tests", "circuit"], no-default-feature = true, solve-group='py313'}
deltakit-explorer-tests-py313 = {features = ["py313", "pytest", "deltakit-explorer-tests", "explorer"], no-default-feature = true, solve-group='py313'}
