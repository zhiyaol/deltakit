---
name: Build, test, and publish stable wheels on PyPI
permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      gh_release:
        description: 'Create a GitHub release'
        required: false
        default: false
        type: boolean
      run_tests:
        description: 'Run tests'
        required: false
        default: false
        type: boolean
      publish_to_pypi:
        description: 'Publish to PyPI'
        required: false
        default: false
        type: boolean

jobs:
  build-wheel:
    name: Build distribution
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [deltakit, deltakit-circuit, deltakit-core, deltakit-decode, deltakit-explorer]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Set working directory
        id: workdir
        run: echo "workdir=${{ matrix.project == 'deltakit' && '.' || format('./{0}', matrix.project) }}" >> $GITHUB_OUTPUT

      - name: Build sdists and wheels
        working-directory: ${{ steps.workdir.outputs.workdir }}
        run: |
          python -m pip install build
          python -m build

      - uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.project }}
          path: ${{ steps.workdir.outputs.workdir }}/dist/*

  test-wheel:
    if: ${{ inputs.run_tests }}
    name: Test imports on ${{ matrix.os }}-${{ matrix.arch }}
    needs: [build-wheel]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]
        python-version: ['3.10', '3.11', '3.12', '3.13']
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        exclude:
          - os: ubuntu-latest
            arch: arm64
          - os: windows-latest
            arch: arm64
          - os: macos-latest
            arch: x64
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: ${{ matrix.python-version }}
            architecture: ${{ matrix.arch }}

      - run: mkdir project

      - uses: actions/download-artifact@v4
        with:
          path: project
          merge-multiple: true

      - name: Test installs in Unix systems
        if: matrix.os != 'windows-latest'
        working-directory: ./project
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install *py3-none-any.whl
          python -c "import deltakit, deltakit_circuit, deltakit_core, deltakit_decode, deltakit_explorer"

      - name: Test installs on Windows OS
        if: matrix.os == 'windows-latest'
        working-directory: ./project
        shell: pwsh
        run: |
          python -m venv .venv
          .venv\Scripts\activate.bat
          pip install (Get-ChildItem *py3-none-any.whl).FullName
          python -c "import deltakit, deltakit_circuit, deltakit_core, deltakit_decode, deltakit_explorer"

  test-sdist:
    if: ${{ inputs.run_tests }}
    name: Test imports after sdists installs
    needs: [build-wheel]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - run: mkdir project

      - uses: actions/download-artifact@v4
        with:
          path: project
          merge-multiple: true

      - name: Test install and imports
        working-directory: ./project
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install *.tar.gz
          python -c "import deltakit, deltakit_circuit, deltakit_core, deltakit_decode, deltakit_explorer"

  publish:
    if: ${{ inputs.publish_to_pypi }}
    name: Publish Python distribution to PyPI
    needs: [build-wheel, test-wheel, test-sdist]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: [deltakit, deltakit-circuit, deltakit-core, deltakit-decode, deltakit-explorer]
    environment:
      name: pypi
      url: https://pypi.org/p/${{ matrix.project }}
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: wheel-${{ matrix.project }}
        path: dist/
    - name: Publish distribution to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    if: ${{ inputs.gh_release }}
    name: >-
      Sign the Python distribution with Sigstore
      and upload them to GitHub Release
    needs: [publish]
    runs-on: ubuntu-latest
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore
    steps:
    - uses: actions/checkout@v4
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        path: dist/
        merge-multiple: true
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.1
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
          python-version: '3.10'

    - name: Extract latest version notes
      run: python tools/extract_version_notes.py GH_RELEASE_NOTES.md

    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        '${{ github.ref_name }}'
        --repo '${{ github.repository }}'
        --notes-file GH_RELEASE_NOTES.md

    - name: Package sdists/signatures together
      run: |
        cd dist
        zip sdists.zip *.tar.gz
        zip signatures.zip *.json
        rm -f *.tar.gz *.json
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'
